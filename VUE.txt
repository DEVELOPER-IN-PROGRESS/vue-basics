let app = new Vue({ el: '#app',  data: { message: 'Hello Vue!' , } }) ; 
upon creating this new instance  the data and DOM are now linked so that if we change the app.message value it gets 
changed inside the DOM html too . 

v-bind is a new attribute provided and developed by  Vue which adds a special reactive behaviour to the 
The vue chrome extennsion detects whether a page is powered by Vue or not . So whenever we add some data via console
it gets rendered to the html indicating the app is declarative and powered by JS 

String interpolation is the name called for dynamic population inside  {{ }}  by Vue 

v-on:click is vue attribute for onClick DOM method
inside vue , when we want to change object properties we can use appname.target-property instead of appname.data.target-property
this is called proxying which is done behind the scenes by vue to make development faster and earier

{{ `${variable1} ${variable2}`}} we can write native JS inside HTML template but it is highly recommened to keep everything inside 
JS file ie the core logic should be isolated .
It is not recommended to use arrow functions inside methods:{} object if there is `this` keyword  in vue as proxying can cause error 

Directives ::  A directive's job is to reactively apply side effects to the DOM when the value of its expression changes. For eg  when 
the initial html page loads we can see {{}} in the application which is bad so we need to hide it before the Javascript 
is fully  loaded . We can do this by v-vloak directive  . egs v-if ; v-else; v-else-if ;  v-on:click ; v-for ; v-bind:href ; 
v-on:click is equivalent to writing v-on:[click]  v-html (for outputting raw HTMl )
use v-show for frequently toggled elements 

Directive shorthands :: <a v-bind:href="url"> </a>   
shorthand <a :href="url"> ... </a>
shorthand with dynamic argument  <a :[key]="url"></a>   OR 
@click  ;     @[event]  ; 

DAta properties and Method : It is possible to add custom properties into Vue instance but make sure it dosent modify 
existing properties . 
A computed method(s) not only separate out the Javascript logic but also has no side effects and we can write Tests cases much 
more efficiently . A computed method gets cached in the DOm and changes only when whenever there is an updation . so unlike method 
invocation inside the template . syntax : {{ methodName }} // No paranthesis required 
compared to the functions written in method , they are called everytime  there is an interaction with DOM 
Computed properties are like a combination of data() and method:{}  and if we use them properly we can increase the perfornamnce 

While iterating objects in a list the order of appearence inside for loop is ( value , key , index ) . Inside large complex 
application we need to set a unique key for the elements so vue can know which to re-render if needed .most cases it would be 
the index of the array or array of objects
